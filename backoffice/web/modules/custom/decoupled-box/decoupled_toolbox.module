<?php

/**
 * @file
 * Contains decoupled_toolbox.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_entity_bundle_create().
 */
function decoupled_toolbox_entity_bundle_create($entity_type, $bundle) {
  /* @var \Drupal\decoupled_toolbox\Service\EntityViewDisplayManagerInterface $entityViewDisplayManager */
  $entityViewDisplayManager = \Drupal::service('decoupled.entity_view_display.manager');
  $entityViewDisplayManager->onBundleCreate($entity_type, $bundle);
}

/**
 * Implements hook_help().
 */
function decoupled_toolbox_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the decoupled_toolbox module.
    case 'help.page.decoupled_toolbox':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Contains common features for decoupled websites.') . '</p>';
      $output .= '<p>' . t('This module provides a view mode named Decoupled (id: decoupled) which is assigned to every available entity type and bundle.') . '</p>';
      return $output;
  }
}

/**
 * Calls Cache::mergeTags().
 *
 * PHPMD workaround for static calls.
 *
 * @param array $a
 *   Cache tags array to merge.
 * @param array $b
 *   Cache tags array to merge.
 *
 * @return string[]
 *   The merged array of cache tags.
 *
 * @see Cache::mergeTags()
 */
function _decoupled_toolbox_cache_merge_tags(array $a = [], array $b = []) {
  return Cache::mergeTags($a, $b);
}

/**
 * Calls Html::escape().
 *
 * PHPMD workaround for static calls.
 *
 * @param string $text
 *   The input text.
 *
 * @return string
 *   The text with all HTML special characters converted.
 *
 * @see Html::escape()
 */
function _decoupled_toolbox_html_escape($text) {
  return Html::escape($text);
}

/**
 * Determine whether a variable is not empty.
 *
 * @param string|array $variable
 *   Variable to be checked.
 *
 * @return bool
 *   Returns TRUE if var exists and has a non-empty, non-zero value.
 *   Otherwise returns FALSE.
 */
function _is_not_empty($variable) {
  return isset($variable) && !empty($variable);
}
