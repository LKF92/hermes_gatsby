<?php

/**
 * @file
 * Customize features that enhanced the contributor experience.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Url;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Site\Settings;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Views;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function he_back_office_entity_bundle_field_info_alter(array &$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() === "node" && $bundle === "page" && isset($fields["field_page_type"])) {
    $fields["field_page_type"]->addConstraint("page_type_constraint", []);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function he_back_office_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form["actions"]["submit"]["#submit"][] = "_he_back_office_node_submit_redirect";

  switch ($form_id) {
    case "node_page_rse_edit_form":
    case "node_page_edit_form":
      $preview_base_uri = Settings::get("preview_server_uri", NULL);

      if (filter_var($preview_base_uri, FILTER_VALIDATE_URL) &&
        $form_state->getFormObject() instanceof EntityFormInterface) {
        /** @var \Drupal\node\NodeInterface $node */
        $node = $form_state->getformObject()->getEntity();

        if (in_array($node->bundle(), ["page", "page_rse"])) {
          // Relative path alias.
          $url_alias = \Drupal::service("path_alias.manager")
            ->getAliasByPath(
              sprintf("/node/%d", $node->id()),
              $node->language()->getId()
            );

          $preview_uri = $preview_base_uri . $node->language()->getId() . $url_alias;

          $form["actions"]["ssr_preview"] = [
            "#type" => "link",
            "#title" => new TranslatableMarkup("Preview"),
            "#access" => TRUE,
            "#attributes" => [
              "class" => ["button"],
            ],
            "#weight" => 10,
            "#button_type" => "primary",
            "#url" => Url::fromUri(
              $preview_uri,
              ["attributes" => ["target" => "_blank"]]
            ),
          ];
        }
      }
      break;
  }
}

/**
 * {@inheritdoc}
 */
function _he_back_office_node_submit_redirect($form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getformObject()->getEntity();
  $form_state->setRedirect("entity.node.edit_form",
    ["node" => $node->id()]
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function he_back_office_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case "views_exposed_form":
      if ($form["#id"] === "views-exposed-form-document-content-page") {
        if (_is_not_empty($form["term_node_tid_depth"])) {
          $form["term_node_tid_depth"]["#options"] =
            array_slice($form["term_node_tid_depth"]["#options"], 0, 1, TRUE)
            + ["empty" => new TranslatableMarkup("- Empty -")]
            + array_slice($form["term_node_tid_depth"]["#options"], 1, NULL, TRUE);
        }
        if (_is_not_empty($form["field_year_target_id"])) {
          uasort($form["field_year_target_id"]["#options"], function ($a, $b) {
            if (is_numeric($a) && is_numeric($b)) {
              return $a < $b;
            }
            return NULL;
          });
        }
      }
      break;
  }
}

/**
 * Implements hook_views_query_alter().
 */
function he_back_office_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() === "document_content" && $view->current_display === "page") {
    // Traverse through the 'where' part of the query.
    foreach ($query->where as &$condition_group) {
      for ($i = 0; $i < count($condition_group["conditions"]); $i++) {
        if ($condition_group["conditions"][$i]["field"] == "node_field_data.nid") {
          if (array_key_exists("term_node_tid_depth", $view->exposed_data)
            && $view->exposed_data["term_node_tid_depth"] === "empty") {
            $configuration = [
              "table" => "node__field_document_category",
              "field" => "entity_id",
              "left_table" => "node_field_data",
              "left_field" => "nid",
              "operator" => "=",
            ];
            $join = Views::pluginManager("join")
              ->createInstance("standard", $configuration);
            $query->addRelationship("node__field_document_category", $join, "node_field_data");
            $query->addWhere("AND", "node__field_document_category.field_document_category_target_id", NULL, "IS NULL");
            unset($condition_group["conditions"][$i]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function he_back_office_form_menu_link_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form["description"]["#access"] = FALSE;
  $form["weight"]["#access"] = FALSE;
  $form["link_override"]["#access"] = FALSE;
  $form["expanded"]["#access"] = FALSE;
  $form["enabled"]["#access"] = FALSE;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function he_back_office_node_insert(EntityInterface $entity) {
  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->hasField("field_meta_tag")
    && $entity->get("field_meta_tag")->isEmpty()) {
    $meta_tag = Paragraph::create([
      "type" => "meta_tag",
      "field_meta_title" => $entity->label(),
      "field_meta_og_title" => $entity->label(),
    ]);
    $entity->set("field_meta_tag", [$meta_tag]);
    $entity->save();
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function he_back_office_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinition $field_definition */
  $field_definition = $context["items"]->getFieldDefinition();
  if ($field_definition->getType() === "link") {
    // Code here will only act on widgets of type link.
    $element["#type"] = "container";
    $element["title"]["#weight"] = -10;
    $element["uri"]["#title"] = new TranslatableMarkup("Link URL");
    unset($element["uri"]["#description"]);
    $element["options"]["attributes"]["target"]["#title"] = new TranslatableMarkup("Link target");
    unset($element["options"]["attributes"]["target"]["#description"]);
  }
}

/**
 * Implements hook_library_info_alter().
 */
function he_back_office_library_info_alter(&$libraries, $extension) {
  if ($extension == "core" && isset($libraries["drupal.tabledrag"])) {
    $libraries["drupal.tabledrag"]["dependencies"][] = "he_back_office/table-drag.override";
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function he_back_office_entity_bundle_info_alter(&$bundles) {
  $bundles["node"]["page_rse"]["untranslatable_fields.default_translation_affected"] = FALSE;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function he_back_office_field_widget_entity_reference_paragraphs_browser_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Remove paragraph summary.
  unset($element["top"]["paragraph_summary"]);
  unset($element["top"]["paragraph_type_title"]["#attributes"]["class"]);
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function he_back_office_editor_js_settings_alter(array &$settings) {
  $settings["editor"]["formats"]["html_simple"]["editorSettings"]["forcePasteAsPlainText"] = TRUE;
  $settings["editor"]["formats"]["full_html"]["editorSettings"]["forcePasteAsPlainText"] = TRUE;
}
